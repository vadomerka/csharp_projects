include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#include <iostream>
#include <string>
#include <random>

const int MAX_WIDTH = 100;
const int MAX_HEIGHT = 100;

void wait_thread(void);
void *thread_func(void *);

struct State {
public:
  State() {}

  State(std::string name, int h, int w, int ammo_cost = 5) : name_(name), height_(h), width_(w), ammo_cost_(ammo_cost) {
    arr_ = new int *[h];
    for (int i = 0; i < h; ++i) {
      arr_[i] = new int[w];
      for (int j = 0; j < w; ++j) {
        arr_[i][j] = 0;
      }
    }
  }

  ~State() {
    for (int i = 0; i < height_; ++i) {
      delete[] arr_[i];
    }
    delete[] arr_;
  }

  void fill_rand(int k = 0, int low_val = 1, int high_val = 10) {
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution<int> randy(0, height_ - 1);
    std::uniform_int_distribution<int> randx(0, width_ - 1);
    std::uniform_int_distribution<int> randv(low_val, high_val);
    int i = 0;
    // TODO: переписать шаффлом
    while (i < k) {
      int r = randy(rng);
      int c = randx(rng);
      int v = randv(rng);
      if (arr_[r][c] == 0) {
        arr_[r][c] = v;
        i++;
      }
    }
    update_stats();
  }

  void update_stats() {
    sum_ = 0;
    number_ = 0;
    for (int i = 0; i < height_; ++i) {
      for (int j = 0; j < width_; ++j) {
        sum_ += arr_[i][j];
        if (arr_[i][j]) {
          number_++;
        }
      }
    }
  }

  int get_sum() const {
    return sum_;
  }

  int get_number() const {
    return number_;
  }

  void print() const {
    std::cout << "State: " << name_ << ";\n";
    std::cout << "Remaining targets: " << get_number() << "; Remaining sum: " << get_sum() << "\n";
    std::cout << "Times fired: " << times_fired_ << "; Spent: " << spent_ << "\n";
    for (size_t i = 0; i < width_; i++) {
      std::cout << "----";
    }
    std::cout << "\n";
    for (size_t i = 0; i < height_; i++) {
      std::cout << '|';
      for (size_t j = 0; j < width_; j++) {
        int check = std::to_string(arr_[i][j]).size();
        std::cout << arr_[i][j] << std::string("    ", 4 - check);
      }
      std::cout << "|\n";
    }
    for (size_t i = 0; i < width_; i++) {
      std::cout << "----";
    }
    std::cout << "\n";
  }

  static bool fire(State& shooter, State& shoten) {
    std::random_device dev;
    std::mt19937 rng(dev());
    std::uniform_int_distribution<int> randy(0, shooter.height_ - 1);
    std::uniform_int_distribution<int> randx(0, shooter.width_ - 1);

    int r = randy(rng);
    int c = randx(rng);
    int target_value = shoten.arr_[r][c];
    shoten.arr_[r][c] = 0;
    shooter.times_fired_++;
    shoten.sum_ -= target_value;

    shooter.spent_ += shooter.ammo_cost_;
    if (shoten.get_sum() < shooter.spent_) {
      return false;
    }
    return true;
  }

  int height_ = 0;
  int width_ = 0;
  int **arr_ = nullptr;
  int sum_ = 0;
  int number_ = 0;
  bool alive_ = true;

  int ammo_cost_ = 0;
  int times_fired_ = 0;
  int spent_ = 0;
  std::string name_;
};

int main() {
  int x = 5;
  int y = 5;
  int n = 0;
  int k = x * y / 2;
  // int state_a[][] = new int[MAX_HEIGHT][MAX_WIDTH];
  // int (*state_a)[MAX_WIDTH] = new int[MAX_HEIGHT][MAX_WIDTH];
  // int (*state_b)[MAX_WIDTH] = new int[MAX_HEIGHT][MAX_WIDTH];
  State a("Anchuaria", y, x);
  a.fill_rand(k);
  a.print();
  State b("Taranteria", y, x);
  b.fill_rand(k);
  b.print();

  State states[] = {a, b};
  int turn = 0;
  while (states[0].alive_ && states[1].alive_) {
    states[turn].alive_ = State::fire(states[turn], states[(turn + 1) % 2]);
    states[turn].print();
    states[(turn + 1) % 2].print();
    // std::cin >> n;
    turn = (turn + 1) % 2;
  }
  if (states[0].alive_) {
    std::cout << states[0].name_ << " won!\n";
  } else {
    std::cout << states[1].name_ << " won!\n";
  }
  
  // pthread_t thread;
  // if (pthread_create(&thread, NULL, thread_func, NULL))
  //   return EXIT_FAILURE;
  // for (unsigned int i = 0; i < 20; i++) {
  //   puts("abcdefghijklmnoprstuvwxyz");
  //   wait_thread();
  // }
  // if (pthread_join(thread, NULL))
  //   return EXIT_FAILURE;
  // return EXIT_SUCCESS;
  return 0;
}



// void wait_thread(void) {
//   time_t start_time = time(NULL);
//   while (time(NULL) == start_time) {
//   }
// }
// void *thread_func(void *vptr_args) {
//   for (unsigned int i = 0; i < 20; i++) {
//     fputs("ABCDEFGHIJKLMNOPRSTUVWXYZ\n", stderr);
//     wait_thread();
//   }
//   return NULL;
// }